import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Bar, Legend, ResponsiveContainer } from 'recharts';
import moment from 'moment';
import numeral from 'numeral'
import React, { useState, useEffect, PureComponent } from 'react';
import Link from 'next/link'
import { createPortal } from 'react-dom';
import _ from 'lodash';

class CustomizedAxisTick extends PureComponent {
  render() {
    const { x, y, stroke, payload } = this.props;

    return (
      <g transform={`translate(${x},${y})`}>
        <text x={0} y={0} dy={16} 
        textAnchor="end" fill="#666" transform="rotate(-35)" 
        fontSize="10px">
          {payload.value}
        </text>
      </g>
    );
  }
}

export default function Home({ 
  daily, 
  vaccinations, 
  confirmedCases,
  deathCases,
  recoveredCases, 
  dailyreports, 
}) {
  const date = Object.keys(confirmedCases[0])
  const confirmedNum = Object.values(confirmedCases[0])
  const recoveredNum = Object.values(recoveredCases[0])
  const deathsNum = Object.values(deathCases[0])

  const graphLastUpdate = date.slice(-1);

  var dataMap = confirmedNum.map((values,index) => ({ 
    "date": date[index], 
    "Confirmed": values, 
    "Recovered": recoveredNum[index], 
    "Deaths": deathsNum[index],
  }));
  
  return (
  <div>
    <Head>
      <title>Covid-19 Visualization üåê</title>
      <meta name="description" content="Generated by create next app" />
    </Head>

  <main >
    <div className="md:container md:mx-auto">
    <div className="grid grid-cols-6 gap-4">
      <div className="col-start-2 col-span-4 ...">
      <div className="text-center">
      <br />
      <h1 className="text-5xl font-bold ">
        ü¶† COVID-19 Outbreak ü¶†
     </h1>
    <div>
    { dailyreports?.map((k, i) => (
      <p key={i} className="text-sm">Last updated: {k.Last_Update}</p>
    ))}
    </div>
    </div>
        
    <div className="grid lg:grid-cols-5 md:grid-cols-2 gap-6 mt-12">
      <div className="lg:col-span-2 rounded-lg py-6 px-6 
      bg-gradient-to-b from-yellow-500 to-yellow-300">
        <p className="textStyle">‚ñ≤ New cases</p>
        <h2 className="lg:text-4xl textStyle">+{daily.cases}</h2>
        <p className="lg:text-base textStyle">Total: {numeral(daily.totalcases).format('0,0')}</p>
      </div>

      <div className="bg-gradient-to-b rounded-lg py-3 px-6 
      from-red-500 to-red-300">
        <p className="textStyle">Deaths</p>
        <h2 className="lg:text-3xl textStyle">{numeral(daily.deaths).format('0,0')}</h2>
        <p className="text-sm text-white">Total: {numeral(daily.totaldeaths).format('0,0')}</p>
      </div>

      <div className="bg-gradient-to-b rounded-lg py-3 px-6 
      from-blue-500 to-blue-300">
        <p className="textStyle">Recovered</p>
        <h2 className="lg:text-3xl textStyle">{numeral(daily.recovered).format('0,0')}</h2>
        <p className="text-sm text-white">Total: {numeral(daily.totalrecovered).format('0,0')}</p>
      </div>

      <div className="bg-gradient-to-b rounded-lg py-3 px-6
      from-green-500 to-green-300">
        <p className="textStyle">Active cases</p>
        <h2 className="lg:text-3xl textStyle">{numeral(daily.active).format('0,0')}</h2>
        <p className="text-sm text-white">Total: {numeral(daily.totalactive).format('0,0')}</p>
      </div>
    </div>  
        
    <div className="mt-10">
      <div className="bg-white rounded-lg py-4 px-4 ">
      <p className="font-bold text-3xl">COVID-19 Confirmed Cases Graph (üáπüá≠ Thailand)</p>
      <p className="text-sm">Last updated: {graphLastUpdate}</p>
      <div className="grid justify-items-center mt-10">
        <ResponsiveContainer  width="99%" aspect={2}>
        <LineChart data={dataMap} className="bg-white" width={700} height={500} >
          <CartesianGrid stroke="#ccc" strokeDasharray="5 5" />
          <XAxis dataKey="date" height={60} padding={{ left: 5, right: 5 }} tick={<CustomizedAxisTick />} />
          <YAxis type="number" domain={ [0, 350000] } />
          <Tooltip />
          <Line type="monotone" dataKey="Confirmed" stroke="#009BDE" />
          <Line type="monotone" dataKey="Recovered" stroke="#C4D600" />
          <Line type="monotone" dataKey="Deaths" stroke="#EB0029" />
        </LineChart>
        </ResponsiveContainer>
      </div>
      </div>
    </div>

    { vaccinations.map((value, i) => (
    <div key={i} className="bg-white rounded-lg py-6 px-6 mt-10">
      <p className="font-bold text-3xl">COVID-19 Vaccinations üíâ</p>
      <p className="text-sm">Last updated: {value.row.date}</p>
      
      <div className="grid lg:grid-cols-3 md:grid-cols-2 gap-4 mt-7">
      <div className="md:col-start-1 col-span-5">
      <div className="grid lg:grid-cols-3 gap-4">

        <div className="bg-gradient-to-b rounded-lg py-3 px-6
        from-purple-500 to-purple-400">
          <p className="textStyle">1st Dose</p>
          <h2 className="lg:text-3xl textStyle text-center">{value.row.people_vaccinated}</h2>
        </div>

        <div className="bg-gradient-to-b rounded-lg py-3 px-6
        from-purple-500 to-purple-400">
          <p className="textStyle">2nd Dose</p>
          <h2 className="lg:text-3xl textStyle text-center">{value.row.people_fully_vaccinated}</h2>
        </div>

        <div className="box1 bg-gradient-to-b rounded-lg py-3 px-6
        from-blue-500 to-blue-400">
          <p className="textStyle">Total vaccinations</p>
          <h2 className="lg:text-3xl textStyle text-center">{value.row.total_vaccinations}</h2>
        </div>

      </div>
      </div>
      </div>
    </div>
    ))}

    <div className="text-center">
      <button type="button" className="border-yellow-300 border-2 
      text-xl font-bold rounded-lg py-3 px-3
      mt-5 bg-gradient-to-r bg-white 
      hover:from-pink-500 hover:to-yellow-500 ...">
      <Link href="/global">
        <a>üîç COVID-19 Global Graph</a>
      </Link>
      </button>
      </div>
    <br />
        
       </div>
       </div>
       </div>
      </main>

      <footer></footer>
    </div>
  )
}


//multiple fetch
export async function getServerSideProps() {
  const domain = `http://localhost:3000`;
  const apiTimeSeriesSet = `/api/timeSeriesThai`;
  const [
    dailyRes, 
    Yesterday, 
    vaccineRes, 
    confirmedRes, 
    deathRes, 
    recoveredRes,
  ] = await Promise.all([
    fetch(`${domain}/api/dailyreports`), 
    fetch(`${domain}/api/dailyreportsYesterday`), 
    fetch(`${domain}/api/vaccinations`),
    fetch(`${domain}${apiTimeSeriesSet}/confirmedCases`),
    fetch(`${domain}${apiTimeSeriesSet}/deathCases`),
    fetch(`${domain}${apiTimeSeriesSet}/recoveredCases`),
  ]);
  
  const [
    dailyreports, 
    dailyreportsYesterday, 
    vaccinations, 
    confirmedCases, 
    deathCases, 
    recoveredCases,
  ] = await Promise.all([
    dailyRes.json(), 
    Yesterday.json(),
    vaccineRes.json(),
    confirmedRes.json(),
    deathRes.json(),
    recoveredRes.json(),
  ]);

  var cases, deaths, recovered, active, totalcases, totaldeaths, totalrecovered, totalactive
  
  dailyreports.data.forEach(i =>
    {
      dailyreportsYesterday.data.forEach(y => 
        {
          totalcases = i.Confirmed
          totaldeaths = i.Deaths
          totalrecovered = i.Recovered
          totalactive = i.Active
          cases = i.Confirmed - y.Confirmed
          deaths = i.Deaths -  y.Deaths
          recovered = i.Recovered -  y.Recovered
          active = i.Active -  y.Active
        }
      );
    }
  );

  return { 
    props: { 
      daily: {
        cases, 
        deaths, 
        recovered, 
        active, 
        totalcases, 
        totaldeaths, 
        totalrecovered, 
        totalactive,
      },
      dailyreports: dailyreports.data,
      vaccinations: vaccinations.data.slice(-1),
      confirmedCases: confirmedCases.data,
      deathCases: deathCases.data,
      recoveredCases: recoveredCases.data,
    }, 
  };
  
}
